// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Fs         = require("fs");
var Path       = require("path");
var FsExtend   = require("../external/node/fsExtend.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

var shouldRemovePathArr = /* array */[
  "lib",
  "es6_global"
];

function _removeRedundancePath(path) {
  return path.slice(3, path.length);
}

function _getRelativePath(filePath) {
  return _removeRedundancePath(Path.relative(filePath, filePath.split("/").filter((function (pathSegment) {
                            return 1 - +shouldRemovePathArr.includes(pathSegment);
                          })).slice(0, -1).join("/")));
}

function changeImportCss(relativePath, fileContent) {
  var importCssRe = (/^importCss\s*\((\"|\')/g);
  var fileNameRe = (/[\"|\'](.*?)[\"|\']/g);
  var hasChangeFile = [/* false */0];
  return /* tuple */[
          hasChangeFile,
          fileContent.split("\n").reduce((function (resultLine, line) {
                  var match = importCssRe.exec(line);
                  if (match !== null) {
                    hasChangeFile[0] = /* true */1;
                    var match$1 = fileNameRe.exec(line);
                    if (match$1 !== null) {
                      var index = Caml_array.caml_array_get(match$1, 0).indexOf("/");
                      var fileName = Caml_array.caml_array_get(match$1, 0).slice(index + 1 | 0, -1);
                      return resultLine + "import '" + relativePath + "/" + fileName + "';\n";
                    } else {
                      return resultLine;
                    }
                  } else {
                    return resultLine + line + "\n";
                  }
                }), "")
        ];
}

function parseSystem(filePath) {
  var relativePath = _getRelativePath(filePath);
  var param = changeImportCss(relativePath, Fs.readFileSync(filePath, "utf8"));
  if (param[0][0]) {
    Fs.writeFileSync(filePath, param[1]);
    console.log("success : " + filePath);
    return /* () */0;
  } else {
    return 0;
  }
}

function convert(filePath) {
  Fs.readdirSync(FsExtend.isFilePathExist(filePath)).forEach((function (fileName) {
          var fileDir = Path.join(filePath, fileName);
          var stats = Fs.statSync(fileDir);
          if (stats.isFile()) {
            var pathObj = Path.parse(fileDir);
            var ext = pathObj.ext;
            if (ext === ".js") {
              return parseSystem(fileDir);
            } else {
              return /* () */0;
            }
          } else if (stats.isDirectory()) {
            return convert(Path.join(filePath, fileName));
          } else {
            return 0;
          }
        }));
  return /* () */0;
}

exports.shouldRemovePathArr   = shouldRemovePathArr;
exports._removeRedundancePath = _removeRedundancePath;
exports._getRelativePath      = _getRelativePath;
exports.changeImportCss       = changeImportCss;
exports.parseSystem           = parseSystem;
exports.convert               = convert;
/* fs Not a pure module */
