// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs                     = require("fs");
var Path                   = require("path");
var Caml_array             = require("bs-platform/lib/js/caml_array.js");
var ExcepetionHandleSystem = require("../external/excepetionHandleSystem.js");

function _removeRedundancePath(path) {
  return path.slice(3, path.length);
}

function _changeImportCss(relativePath, fileContent) {
  var importCssRe = (/^.*importCss\s*\((\"|\')/g);
  var fileNameRe = (/[\"|\'](.*?)[\"|\']/g);
  var hasChangeFile = [/* false */0];
  return /* tuple */[
          hasChangeFile,
          fileContent.split("\n").reduce((function (resultLine, line) {
                  var match = +importCssRe.test(line);
                  if (match !== 0) {
                    hasChangeFile[0] = /* true */1;
                    var match$1 = fileNameRe.exec(line);
                    if (match$1 !== null) {
                      var index = Caml_array.caml_array_get(match$1, 0).indexOf("/");
                      var fileName = Caml_array.caml_array_get(match$1, 0).slice(index + 1 | 0, -1);
                      return resultLine + ("import '" + (relativePath + ("/" + (fileName + "';\n"))));
                    } else {
                      return resultLine;
                    }
                  } else {
                    return resultLine + (line + "\n");
                  }
                }), "")
        ];
}

function _getRelativePath(removePathArray, filePath) {
  return _removeRedundancePath(Path.relative(filePath, filePath.split("/").filter((function (pathSegment) {
                            return 1 - +removePathArray.includes(pathSegment);
                          })).slice(0, -1).join("/")));
}

function _parseSystem(removePathArray, filePath) {
  var relativePath = _getRelativePath(removePathArray, filePath);
  var param = _changeImportCss(relativePath, Fs.readFileSync(filePath, "utf8"));
  if (param[0][0]) {
    Fs.writeFileSync(filePath, param[1]);
    console.log("success : " + filePath);
    return /* () */0;
  } else {
    return 0;
  }
}

function convertRecursion(filePath, removePathArray) {
  var result = +Fs.existsSync(filePath);
  if (result !== 0) {
    Fs.readdirSync(filePath).forEach((function (fileName) {
            var fileDir = Path.join(filePath, fileName);
            var stats = Fs.statSync(fileDir);
            if (stats.isFile()) {
              var pathObj = Path.parse(fileDir);
              var ext = pathObj.ext;
              if (ext === ".js") {
                return _parseSystem(removePathArray, fileDir);
              } else {
                return /* () */0;
              }
            } else if (stats.isDirectory()) {
              return convertRecursion(Path.join(filePath, fileName), removePathArray);
            } else {
              return 0;
            }
          }));
    return /* () */0;
  } else {
    return ExcepetionHandleSystem.throwMessage("the " + (String(filePath) + " should exist"));
  }
}

function convert(filePath, removePathArray) {
  if (removePathArray) {
    return convertRecursion(filePath, removePathArray[0]);
  } else {
    return convertRecursion(filePath, /* array */[
                "lib",
                "es6_global"
              ]);
  }
}

exports._removeRedundancePath = _removeRedundancePath;
exports._changeImportCss      = _changeImportCss;
exports._getRelativePath      = _getRelativePath;
exports._parseSystem          = _parseSystem;
exports.convertRecursion      = convertRecursion;
exports.convert               = convert;
/* fs Not a pure module */
